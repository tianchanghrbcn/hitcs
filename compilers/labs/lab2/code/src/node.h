/******************************************************************************
 * node.h
 * 描述  : 定义抽象语法树(Ast)的节点结构及相关操作(创建、添加子节点、打印)。
 *         供词法分析和语法分析阶段创建抽象语法树使用，也可在后续阶段遍历该树执行语义检查。
 ******************************************************************************/

#ifndef _MY_NODE_H_
#define _MY_NODE_H_

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdarg.h>

// 最大子节点数
#define MAX_CHILD_NUM 7

// 外部变量, 由词法分析器(bison/flex)维护的当前行号
extern int yylineno;

/******************************************************************************
 * 结构名: Node
 * 描  述: 抽象语法树节点结构
 * 成  员:
 *   - name    : 节点名称, 如 "ID", "INT", "ExtDef" 等
 *   - text    : 节点的文本内容, 如标识符 "x", 整数 "123", 类型 "int" 等
 *   - lineno  : 节点所在的源代码行号
 *   - childsum: 子节点数量
 *   - child[] : 存放子节点指针的数组, 最多可有 MAX_CHILD_NUM 个子节点
 ******************************************************************************/
typedef struct Abstract_Tree {
    char name[32];                        // 节点名称
    char text[32];                        // 节点文本内容
    int lineno;                           // 节点所在行号
    int childsum;                         // 子节点数量
    struct Abstract_Tree* child[MAX_CHILD_NUM]; // 指向子节点的指针数组
} Node;

/******************************************************************************
 * 函数声明: createNode
 * 用  途 : 创建并初始化一个抽象语法树节点
 * 参  数 :
 *   - name: 节点的名称(如 "ID", "TYPE", "INT" 等)
 *   - text: 节点携带的文本内容(如具体标识符名称或字面量)
 * 返回值 : 新建节点的指针
 ******************************************************************************/
Node* createNode(char* name, char* text);

/******************************************************************************
 * 函数声明: addChild
 * 用  途 : 为某个父节点依次添加多个子节点
 * 参  数 :
 *   - childsum: 要添加的子节点数量
 *   - parent  : 父节点指针
 *   - ...     : 可变参数, 依次传入子节点的指针
 * 返回值 : 无
 ******************************************************************************/
void addChild(int childsum, Node* parent, ...);

/******************************************************************************
 * 函数声明: printTree
 * 用  途 : 打印抽象语法树, 以缩进的方式展示层次结构
 * 参  数 :
 *   - root : 抽象语法树根节点
 *   - blank: 当前打印要缩进的空格数量
 * 返回值 : 无
 ******************************************************************************/
void printTree(Node* root, int blank);

#endif // _MY_NODE_H_
